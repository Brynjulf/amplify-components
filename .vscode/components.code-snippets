{
  // Place your ClientApp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.

  "Test Setup": {
    "scope": "javascript,typescript, typescriptreact",
    "prefix": "testSetup",
    "body": [
      "import React from \"react\";\nimport {\n  render,\n  fireEvent,\n screen,\n  cleanup,\n} from \"../../../utils/test-utils\";\nimport \"@testing-library/jest-dom/extend-expect\";",
      "import ${3:ComponentToTest} from \"../index\";\n\n",
      "\nafterEach(cleanup);\n",
      "describe(\"$3\", () => {\n  it(\"renders without crashing\", () => {\n    const div = document.createElement(\"div\");\n    render(<${3:ComponentToTest}></${3:ComponentToTest}>);\n  });\n});",
      "${4}"
    ],
    "description": "Generate test imports and format"
  },
  "Functional Component Boilerplate": {
    "scope": "typescriptreact",
    "prefix": "component",
    "body": [
      "import React from \"react\";\nimport styled from \"styled-components\";\n\n",
      "const ${1:Container} = styled.div`\n`;\n",
      "const ${2:Component}: React.FC = () => (\n<Container>MainComponent</Container>\n);\n\nexport default $2;"
    ]
  },
  "Styled Component Div": {
    "scope": "typescriptreact",
    "prefix": "divStyled",
    "body": ["const ${1:StyledComponent} = styled.div``;"]
  },
  "React-Intl FormatMessage": {
    "scope": "typescriptreact",
    "prefix": "translate",
    "body": [
      "formatMessage({ id: 'translation file id', defaultMessage: 'Translation Not Found'})"
    ]
  },
  "React-Intl FormatMessage Hook": {
    "scope": "typescriptreact",
    "prefix": "formatMessage",
    "body": ["const { formatMessage } = useIntl();"]
  }
}
